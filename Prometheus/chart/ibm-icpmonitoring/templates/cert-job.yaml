{{- if or (eq .Values.mode "managed") .Values.tls.enabled -}}

# Licensed Materials - Property of IBM
# 5737-E67
# @ Copyright IBM Corporation 2016, 2018. All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

{{- if not (eq .Release.Namespace "kube-system") }}

{{ $cn := "monitoring-service" }}
{{ $ca := genCA "$cn" 3650 }}

---

apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  labels:
    app: {{ template "prometheus.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "monitoring.fullname" . }}-ca-cert
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": never
    "helm.sh/hook-weight": "-12"
data:
  tls.crt: {{ print $ca.Cert | b64enc }}
  tls.key: {{ print $ca.Key | b64enc }}

{{- end }}

---

apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: {{ template "prometheus.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "monitoring.fullname" . }}-cert-job
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "-8"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: cert
    spec:
    {{- if eq .Values.mode "managed" }}
      tolerations:
      - key: "dedicated"
        operator: "Exists"
        effect: "NoSchedule"
    {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
            {{- if eq .Values.mode "managed" }}
              - key: management
                operator: In
                values:
                - "true"
            {{- end }}
      containers:
      - name: cert-gen
        image: {{ .Values.certGen.image.repository }}:{{ .Values.certGen.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - generate_cert.sh
        env:
          - name: altName1
            value: {{ printf "%s-prometheus" .Release.Name }}
          - name: altName2
            value: {{ printf "%s-prometheus-alertmanager" .Release.Name }}
          - name: altName3
            value: {{ printf "%s-grafana" .Release.Name }}
          - name: altName4
            value: {{ printf "%s-prometheus.%s" .Release.Name .Release.Namespace }}
          - name: altName5
            value: {{ printf "%s-prometheus-alertmanager.%s" .Release.Name .Release.Namespace }}
          - name: altName6
            value: {{ printf "%s-grafana.%s" .Release.Name .Release.Namespace }}
          - name: altName7
            value: {{ printf "%s-prometheus.%s.svc" .Release.Name .Release.Namespace }}
          - name: altName8
            value: {{ printf "%s-prometheus-alertmanager.%s.svc" .Release.Name .Release.Namespace }}
          - name: altName9
            value: {{ printf "%s-grafana.%s.svc" .Release.Name .Release.Namespace }}
          - name: altAddress
            value: {{ .Values.router.subjectAlt }}
          - name: releaseNameSpace
            value: {{ .Release.Namespace }}
        volumeMounts:
        - name: script
          mountPath: /usr/local/bin/generate_cert.sh
          subPath: generate_cert.sh
        - name: ca
          mountPath: /ca
      volumes:
      - name: script
        configMap:
          name: {{ template "monitoring.fullname" . }}-cert-init
          items:
          - key: generate_cert.sh
            path: generate_cert.sh
            mode: 0777
      {{- if (eq .Release.Namespace "kube-system") }}
      - name: ca
        secret:
          defaultMode: 0777
          secretName: cluster-ca-cert
      {{- else }}
      - name: ca
        secret:
          defaultMode: 0777
          secretName: {{ template "monitoring.fullname" . }}-ca-cert
      {{- end }}
      restartPolicy: Never

---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ template "prometheus.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "monitoring.fullname" . }}-cert-init
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "-9"
data:
  generate_cert.sh: |
    #!/bin/bash

    # Generate the server cert
    echo "Copying certificates from mount point to local directory"
    ca_crt=/ca/tls.crt
    ca_key=/ca/tls.key

    cp $ca_crt ca.crt
    cp $ca_key ca.key

    cat <<EOF | kubectl replace -f -
    apiVersion: v1
    kind: Secret
    type: kubernetes.io/tls
    metadata:
      name: {{ template "monitoring.fullname" . }}-ca-cert
      namespace: $releaseNameSpace
    data:
      tls.crt: $(cat ca.crt | base64 | tr -d '\n')
      tls.key: $(cat ca.key | base64 | tr -d '\n')
    EOF

    if [[ $altAddress =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "AltAddress is IP: "$altAddress 
      export ALT_ENTRY="IP.1 = "$altAddress
    else
      echo "AltAddress is domain: "$altAddress 
      export ALT_ENTRY="DNS.10 = "$altAddress
    fi

    cat >openssl.cnf <<EOL
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = critical,CA:FALSE
    keyUsage = keyEncipherment,digitalSignature
    extendedKeyUsage = serverAuth,clientAuth
    subjectAltName = @alt_names

    [alt_names]
    DNS.1 = $altName1
    DNS.2 = $altName2
    DNS.3 = $altName3
    DNS.4 = $altName4
    DNS.5 = $altName5
    DNS.6 = $altName6
    DNS.7 = $altName7
    DNS.8 = $altName8
    DNS.9 = $altName9
    $ALT_ENTRY
    EOL

    # Generate the certs
    openssl genrsa -out monitoring.key 2048
    openssl req -new -key monitoring.key -out monitoring.crt -subj "/CN=monitoring-service" -config openssl.cnf
    openssl x509 -req -in monitoring.crt \
        -CA ca.crt -CAkey ca.key -CAcreateserial  \
        -out monitoring.crt -days 36500 -extensions v3_req -extfile openssl.cnf

    cat <<EOF | kubectl replace -f -
    apiVersion: v1
    kind: Secret
    type: kubernetes.io/tls
    metadata:
      name: {{ template "monitoring.fullname" . }}-certs
      namespace: $releaseNameSpace
    data:
      tls.crt: $(cat monitoring.crt | base64 | tr -d '\n')
      tls.key: $(cat monitoring.key | base64 | tr -d '\n')
    EOF

    cat >openssl2.cnf <<EOL
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = critical,CA:FALSE
    keyUsage = keyEncipherment,digitalSignature
    extendedKeyUsage = serverAuth,clientAuth
    EOL

    # Generate the certs
    openssl genrsa -out monitoring2.key 2048
    openssl req -new -key monitoring2.key -outform PEM -out monitoring2.crt -subj "/CN=monitoring-service" -config openssl2.cnf
    openssl x509 -req -in monitoring2.crt \
        -CA ca.crt -CAkey ca.key -CAcreateserial  \
        -outform PEM -out monitoring2.crt -days 36500 -extensions v3_req -extfile openssl2.cnf

    cat <<EOF | kubectl replace -f -
    apiVersion: v1
    kind: Secret
    type: kubernetes.io/tls
    metadata:
      name: {{ template "monitoring.fullname" . }}-client-certs
      namespace: $releaseNameSpace
    data:
      tls.crt: $(cat monitoring2.crt | base64 | tr -d '\n')
      tls.key: $(cat monitoring2.key | base64 | tr -d '\n')
    EOF

    echo done

---

apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: {{ template "prometheus.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "monitoring.fullname" . }}-cert-delete-job
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "99"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: cert
    spec:
    {{- if eq .Values.mode "managed" }}
      tolerations:
      - key: "dedicated"
        operator: "Exists"
        effect: "NoSchedule"
    {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
            {{- if eq .Values.mode "managed" }}
              - key: management
                operator: In
                values:
                - "true"
            {{- end }}
      containers:
      - name: cert-gen
        image: {{ .Values.certGen.image.repository }}:{{ .Values.certGen.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - delete_cert.sh
        env:
          - name: releaseNameSpace
            value: {{ .Release.Namespace }}
        volumeMounts:
        - name: script
          mountPath: /usr/local/bin/delete_cert.sh
          subPath: delete_cert.sh
      volumes:
      - name: script
        configMap:
          name: {{ template "monitoring.fullname" . }}-cert-delete
          items:
          - key: delete_cert.sh
            path: delete_cert.sh
            mode: 0777
      restartPolicy: Never

---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ template "prometheus.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "monitoring.fullname" . }}-cert-delete
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "98"
data:
  delete_cert.sh: |
    #!/bin/bash

    # Delete the secrets
    echo "removing the secrets"
    kubectl delete secret {{ template "monitoring.fullname" . }}-ca-cert -n $releaseNameSpace
    kubectl delete secret {{ template "monitoring.fullname" . }}-certs -n $releaseNameSpace
    kubectl delete secret {{ template "monitoring.fullname" . }}-client-certs -n $releaseNameSpace

    echo done
{{- end -}}

